{
    "id":  "59a5a447-7bcc-11e9-866e-00155d130b89",
    "partnerId":  "00000000-0000-0000-0000-000000000000",
    "category":  [
                     "Network"
                 ],
    "description":  "Change DNS Configuration Task",
    "engine":  "powershell",
    "engineMaxVersion":  5,
    "expectedExecutionTimeSec":  300,
    "failureMessage":  "Executed with errors",
    "successMessage":  "Successfully Executed",
    "internal":  false,
    "name":  "Change DNS Configuration Task",
    "tags":  [
                 "Windows 7",
                 "Windows 10"
             ],
    "sequence":  true,
    "content":  "",
    "jsonSchema":  "",
    "uiSchema":  "",
    "isHDScript":  false
}
